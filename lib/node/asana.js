// Generated by CoffeeScript 1.3.1
(function() {
  var Collection, Model, User, Users, Workspace, Workspaces, addCollection, addModel, addObjects, b64, defaults, isEmpty, objects, querystringify, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  _ref = require("./utils"), b64 = _ref.b64, defaults = _ref.defaults, querystringify = _ref.querystringify, isEmpty = _ref.isEmpty;

  _ref1 = require("backbone"), Collection = _ref1.Collection, Model = _ref1.Model;

  module.exports.Asana = (function() {

    Asana.name = 'Asana';

    function Asana(opts) {
      this.asana = {
        params: {
          auth: b64("" + opts.key + ":"),
          path: opts.path || "/api/1.0",
          host: opts.host || "app.asana.com",
          scheme: opts.scheme || "https",
          options: opts.options || {}
        },
        read: function() {
          return {
            method: "GET",
            expects: 200
          };
        }
      };
      if (this.asana.params.scheme === "https") {
        this.asana.http = require("https");
        this.asana.params.port = opts.port || 443;
      } else {
        this.asana.http = require("http");
        this.asana.params.port = opts.port || 80;
      }
      addObjects(this);
      this.user = new this.User;
      this.user.url = "/users/me";
    }

    Asana.prototype.sync = function(method, model, opts) {
      var error, expects, headers, http_opts, options, params, query, req, success, url;
      if (opts == null) {
        opts = {};
      }
      params = model.asana[method]();
      url = typeof this.url === "function" ? this.url() : this.url;
      expects = params.expects || 200;
      query = params.query;
      error = opts.error || function() {};
      success = opts.success || function() {};
      options = defaults(this.asana.params.options, opts.asana);
      headers = {
        "Accept": "application/json",
        "Authorization": "Basic " + this.asana.params.auth
      };
      http_opts = {
        host: this.asana.params.host,
        port: this.asana.params.port,
        method: params.method || "GET",
        path: "" + this.asana.params.path + url,
        headers: headers,
        scheme: this.asana.params.scheme
      };
      if (!isEmpty(options)) {
        if (http_opts.method === "GET") {
          http_opts.path = "" + http_opts.path + "?" + (querystringify(options));
        } else {
          query || (query = {});
          query.options = options;
        }
      }
      if (query != null) {
        query = JSON.stringify(query);
        opts.headers["Content-Type"] = "application/json";
        opts.headers["Content-Length"] = query.length;
      }
      req = this.asana.http.request(http_opts, function(res) {
        var data;
        data = "";
        res.on("data", function(buf) {
          return data += buf;
        });
        return res.on("end", function() {
          try {
            data = JSON.parse(data);
          } catch (err) {

          }
          if (res.statusCode !== expects) {
            err = {
              code: res.statusCode,
              headers: res.headers,
              options: http_opts,
              query: query,
              response: data
            };
            return error(model, err);
          }
          return success(data.data, res.statusCode, res);
        });
      });
      return req.end(query);
    };

    return Asana;

  })();

  User = (function(_super) {

    __extends(User, _super);

    User.name = 'User';

    function User() {
      return User.__super__.constructor.apply(this, arguments);
    }

    User.prototype.baseUrl = "/users";

    return User;

  })(Model);

  Users = (function(_super) {

    __extends(Users, _super);

    Users.name = 'Users';

    function Users() {
      return Users.__super__.constructor.apply(this, arguments);
    }

    Users.prototype.url = "/users";

    return Users;

  })(Collection);

  Workspace = (function(_super) {

    __extends(Workspace, _super);

    Workspace.name = 'Workspace';

    function Workspace() {
      return Workspace.__super__.constructor.apply(this, arguments);
    }

    Workspace.prototype.baseUrl = "/workspaces";

    return Workspace;

  })(Model);

  Workspaces = (function(_super) {

    __extends(Workspaces, _super);

    Workspaces.name = 'Workspaces';

    function Workspaces() {
      return Workspaces.__super__.constructor.apply(this, arguments);
    }

    Workspaces.prototype.url = "/workspaces";

    return Workspaces;

  })(Collection);

  addModel = function(client, name, klass) {
    return client[name] = (function(_super) {

      __extends(_Class, _super);

      function _Class() {
        return _Class.__super__.constructor.apply(this, arguments);
      }

      _Class.prototype.asana = client.asana;

      _Class.prototype.sync = function() {
        return client.sync.apply(this, arguments);
      };

      return _Class;

    })(klass);
  };

  addCollection = function(client, name, klass, model) {
    addModel(client, name, klass);
    return klass.prototype.model = client[model];
  };

  addObjects = function(client) {
    var klass, model, name, _ref2, _ref3, _ref4, _results;
    _ref2 = objects.models;
    for (name in _ref2) {
      klass = _ref2[name];
      addModel(client, name, klass);
    }
    _ref3 = objects.collections;
    _results = [];
    for (name in _ref3) {
      _ref4 = _ref3[name], klass = _ref4.klass, model = _ref4.model;
      _results.push(addCollection(client, name, klass, model));
    }
    return _results;
  };

  objects = {
    models: {
      "User": User,
      "Workspace": Workspace
    },
    collections: {
      "Users": {
        klass: Users,
        model: "User"
      },
      "Workspaces": {
        klass: Workspaces,
        model: "Workspace"
      }
    }
  };

}).call(this);
