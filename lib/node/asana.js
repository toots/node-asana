// Generated by CoffeeScript 1.3.1
(function() {
  var User, b64, defaults, isEmpty, querystringify, _ref;

  _ref = require("./utils"), b64 = _ref.b64, defaults = _ref.defaults, querystringify = _ref.querystringify, isEmpty = _ref.isEmpty;

  module.exports.Asana = (function() {

    Asana.name = 'Asana';

    function Asana(opts) {
      this.auth = b64("" + opts.key + ":");
      this.version = "1.0";
      this.path = opts.path || ("/api/" + this.version);
      this.host = opts.host || "app.asana.com";
      this.scheme = opts.scheme || "https";
      this.options = opts.options || {};
      if (this.scheme === "https") {
        this.http = require("https");
        this.port = opts.port || 443;
      } else {
        this.http = require("http");
        this.port = opts.port || 80;
      }
      this.User = defaults(this, User);
    }

    Asana.prototype.request = function(opts, options, fn) {
      var expects, headers, query, req;
      if (fn == null) {
        fn = options;
        options = {};
      }
      expects = opts.expects || 200;
      query = opts.query;
      options = defaults(this.options, options);
      headers = {
        "Accept": "application/json",
        "Authorization": "Basic " + this.auth
      };
      opts = {
        host: this.host,
        port: this.port,
        method: opts.method || "GET",
        path: "" + this.path + opts.path,
        headers: headers,
        scheme: this.scheme
      };
      if (!isEmpty(options)) {
        if (opts.method === "GET") {
          opts.path = "" + opts.path + "?" + (querystringify(options));
        } else {
          query || (query = {});
          query.options = options;
        }
      }
      if (query != null) {
        query = JSON.stringify(query);
        opts.headers["Content-Type"] = "application/json";
        opts.headers["Content-Length"] = query.length;
      }
      req = this.http.request(opts, function(res) {
        var data;
        data = "";
        res.on("data", function(buf) {
          return data += buf;
        });
        return res.on("end", function() {
          try {
            data = JSON.parse(data);
          } catch (err) {

          }
          if (res.statusCode !== expects) {
            err = {
              code: res.statusCode,
              headers: res.headers,
              options: opts,
              query: query,
              response: data
            };
            return fn(err, null);
          }
          return fn(null, data.data);
        });
      });
      return req.end(query);
    };

    return Asana;

  })();

  User = (function() {

    User.name = 'User';

    function User() {}

    User.all = function(opts, fn) {
      return this.request({
        path: "/users"
      }, opts, fn);
    };

    return User;

  })();

}).call(this);
